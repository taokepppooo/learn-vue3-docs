import{_ as l,c as n,a as o,b as c,w as d,d as r,r as s,o as p,e as a}from"./app-BQUeuKW9.js";const i="/learn-vue3-docs/assets/createApp-IW6GMvDb.png",m="/learn-vue3-docs/assets/createApp-create-process-BHlXC1Cx.png",u="/learn-vue3-docs/assets/mount-vnode-init-obj-Bht5aLuj.png",h={},_={class:"table-of-contents"};function g(f,e){const t=s("router-link");return p(),n("div",null,[e[2]||(e[2]=o("h1",{id:"源码学习",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#源码学习"},[o("span",null,"源码学习")])],-1)),o("nav",_,[o("ul",null,[o("li",null,[c(t,{to:"#创建实例"},{default:d(()=>e[0]||(e[0]=[a("创建实例")])),_:1})]),o("li",null,[c(t,{to:"#挂载实例"},{default:d(()=>e[1]||(e[1]=[a("挂载实例")])),_:1})])])]),e[3]||(e[3]=r('<h2 id="创建实例" tabindex="-1"><a class="header-anchor" href="#创建实例"><span>创建实例</span></a></h2><p>使用<code>createApp</code>方法创建一个或多个实例，<code>createApp</code>支持两个参数: <code>rootComponent</code> 和 <code>rootProps</code>。 <code>createApp</code>方法大概执行以下几个步骤：</p><ul><li>调用<code>createAppContext()</code>方法，创建一个app上下文。</li><li>初始化<code>plugins</code>变量。</li><li>创建app对象，其中包含<code>createApp</code>的参数、app上下文，以及实例的一些方法。</li></ul><p>代码示例： <img src="'+i+'" alt="alt 创建实例代码示例"></p><p>创建流程: <img src="'+m+'" alt="alt 创建实例流程示例"></p><h2 id="挂载实例" tabindex="-1"><a class="header-anchor" href="#挂载实例"><span>挂载实例</span></a></h2><p>在创建实例后，调用<code>mount</code>方法时，对入参进行了处理，将<code>mount</code>入参为<code>String</code>类型的都变为<code>HTMLElement</code>类型，并且将<code>app._component.template</code>的值设置为<code>container.innerHTML</code>, <code>mount</code>方法中<code>createVNode(rootComponent, rootProps)</code>创建一个虚拟节点, 并执行<code>render</code>方法。</p><p>挂载实例的流程如下：</p><ul><li><code>_createVNode(type, props)</code>获取<code>shapeFlag</code>的状态值，并且返回一个<code>createBaseVNode</code>方法的调用结果。</li><li><code>createBaseVNode</code>方法会首先初始化一个<code>vnode</code>对象 <img src="'+u+'" alt="alt 虚拟节点初始化对象"></li><li>执行<code>render</code>方法，<code>render</code>方法会根据<code>shapeFlag</code>的值，执行不同的渲染逻辑。</li><li>最终都会执行<code>compileToFunction</code>方法，将<code>template</code>编译为<code>render</code>函数。</li><li><code>tokenizer.parse(template)</code>会解析<code>template</code>字符串，并且将解析的值放到<code>Tokenizer</code>对象的属性中。</li></ul>',9))])}const k=l(h,[["render",g],["__file","source-learn.html.vue"]]),x=JSON.parse('{"path":"/source-learn.html","title":"源码学习","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"创建实例","slug":"创建实例","link":"#创建实例","children":[]},{"level":2,"title":"挂载实例","slug":"挂载实例","link":"#挂载实例","children":[]}],"git":{"updatedTime":1727185335000,"contributors":[{"name":"taokepppooo","email":"1075626521@qq.com","commits":1},{"name":"toki","email":"taokepppooo@gmail.com","commits":1}]},"filePathRelative":"source-learn.md"}');export{k as comp,x as data};
